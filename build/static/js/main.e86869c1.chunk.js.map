{"version":3,"sources":["image/background.jpg","image/starwars.png","utils/getClients.ts","components/FilmCharacter/FilmCharacter.tsx","components/FilmCharacter/query.ts","utils/getRandom.ts","utils/getHighest.ts","types/gameType.ts","components/Card.tsx","context/GameHistoryContext.ts","components/Components.tsx","components/FilmCharacter/FilmCharactersContainer.tsx","components/StarShips/StarShip.tsx","components/StarShips/query.ts","components/StarShips/StarShipsContainer.tsx","components/Dashboard.tsx","pages/GamePage/GamePage.tsx","pages/HistoryPage/HistoryPage.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","getClient","url","link","HttpLink","uri","ApolloClient","cache","InMemoryCache","PeopleCard","styled","div","FilmCharacter","person","player","name","height","QUERY_STARWARS_FILM_CHARACTER","gql","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getRandom","numberOfItems","shuffled","slice","getHighest","GameType","property","reduce","prev","curr","node","GridItem","Card","props","children","GameHistoryContext","React","createContext","GameHistoryProvider","Provider","Consumer","LoadingComponent","ErrorComponent","FilmCharactersGameContainer","numberOfPeople","currentRound","useQuery","QUERY_STARWARS_SHARSHIPS","data","error","loading","useContext","setLastWinner","gameHistory","setGameHistory","useState","currentCards","setCurrentCards","useEffect","allPeople","edges","people","winner","map","peopleEdge","index","key","StarshipCard","StarShip","ship","model","hyperdriveRating","StarShipsContainer","numberOfShips","allStarships","ships","starshipsEdge","DashBoardPanel","Button","button","Title","h3","Dashboard","handleGameClick","lastWinner","onClick","Character","Spaceship","to","MainContainer","Background","GameContainer","GamePage","currentGameType","setCurrentGameType","setCurrentRound","src","StarwarsLogo","width","alt","event","FilmCharactersContainer","HistoryPage","history","App","client","value","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e86869c1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.2c86cf5e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/starwars.293e5f7b.png\";","import { ApolloClient } from 'apollo-client';\r\nimport { InMemoryCache } from 'apollo-cache-inmemory';\r\nimport { HttpLink } from 'apollo-link-http';\r\n\r\nfunction getClient<Value> (\r\n    url: string) {\r\n    const link = new HttpLink({uri: url});\r\n    return new ApolloClient({\r\n        link: link,\r\n        cache: new InMemoryCache()\r\n    });\r\n\r\n  }\r\n\r\nexport default getClient;\r\n  ","import React, { FunctionComponent } from 'react';\r\nimport { Person } from '../../generated/graphql';\r\nimport styled from \"styled-components\"\r\n\r\nconst PeopleCard = styled.div`\r\n  color: #fff;\r\n  font-weight: 300;\r\n  font-size: 1rem;\r\n`\r\n\r\ninterface FilmCharacterProps {\r\n  person: Person;\r\n  player: number;\r\n}\r\n\r\nexport const FilmCharacter: FunctionComponent<FilmCharacterProps> =\r\n  ({person, player}) => {\r\n    \r\n    return (\r\n       <PeopleCard>\r\n          <p>Player: Player {player}</p>\r\n          <p>Name: {person?.name}</p>\r\n          <p>Height: {person?.height}</p>\r\n      </PeopleCard>\r\n    )\r\n};\r\n\r\nexport default FilmCharacter;","import gql from \"graphql-tag\";\r\n\r\nconst QUERY_STARWARS_FILM_CHARACTER = gql`\r\n{\r\n  allPeople {\r\n \tedges {\r\n      node {\r\n        name\r\n        height\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nexport default QUERY_STARWARS_FILM_CHARACTER;","function getRandom<Value> (\r\n    array: Array<any>,\r\n    numberOfItems: Number) \r\n{\r\n    const shuffled = shuffle(array);\r\n    return shuffled?.slice(0, numberOfItems)\r\n}\r\n\r\n\r\nconst shuffle = (array: any) => {\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n\r\n    return array;\r\n}\r\n\r\nexport default getRandom;\r\n  ","function getHighest<Value> (\r\n    array: Array<any>,\r\n    property: string) \r\n{\r\n    return array.reduce((prev, curr) => prev.node[property] < curr.node[property] ? prev : curr);\r\n}\r\n\r\nexport default getHighest;","enum GameType {\r\n    Character,\r\n    Spaceship\r\n}\r\n\r\nexport default GameType","import React, { FunctionComponent } from 'react';\r\nimport styled from \"styled-components\"\r\n\r\nconst GridItem = styled.div`\r\n    border: 1px solid white;\r\n    padding-left: 20px;\r\n    background-color: black;\r\n    height: 30vh;\r\n`\r\ninterface CardProps {}\r\n\r\nconst Card: FunctionComponent<CardProps> = (props) => {\r\n  return (\r\n    <GridItem>\r\n        {props.children}\r\n    </GridItem>\r\n  )\r\n}\r\n\r\nexport default Card;\r\n\r\n","import React from 'react';\r\n\r\ninterface GameHistoryContextProps {\r\n    gameHistory: Array<string>,\r\n    lastWinner: string,\r\n    setGameHistory: Function,\r\n    setLastWinner: Function\r\n};\r\n\r\nconst GameHistoryContext = React.createContext<Partial<GameHistoryContextProps>>({});\r\n\r\nexport const GameHistoryProvider = GameHistoryContext.Provider\r\nexport const GameHistoryConsumer = GameHistoryContext.Consumer\r\n\r\nexport default GameHistoryContext","import React from 'react';\r\n\r\nexport const LoadingComponent = () => <div>LOADING</div>;\r\n\r\nexport const ErrorComponent = () => <div>ERROR</div>;","\r\nimport React, { FunctionComponent, useContext, useState, useEffect, Fragment } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport FilmCharacter from './FilmCharacter'\r\nimport QUERY_STARWARS_SHARSHIPS from './query'\r\nimport { PeopleEdge } from '../../generated/graphql';\r\nimport getRandom from '../../utils/getRandom';\r\nimport getHighest from '../../utils/getHighest';\r\nimport Card from '../Card';\r\nimport GameHistoryContext from '../../context/GameHistoryContext';\r\nimport { ErrorComponent, LoadingComponent } from '../Components';\r\n\r\ninterface FilmCharactersGameContainerProps {\r\n  numberOfPeople: number;\r\n  currentRound: number;\r\n}\r\n\r\nexport const FilmCharactersGameContainer: FunctionComponent<FilmCharactersGameContainerProps> =\r\n    ({ numberOfPeople, currentRound }) => {\r\n\r\n  const { data, error, loading } = useQuery(QUERY_STARWARS_SHARSHIPS);\r\n  const { setLastWinner,  gameHistory, setGameHistory }  = useContext(GameHistoryContext)\r\n  const [ currentCards, setCurrentCards] = useState();   \r\n\r\n  useEffect(() => {\r\n    if (!data?.allPeople?.edges) \r\n      return\r\n\r\n    const people = getRandom(data?.allPeople?.edges, numberOfPeople);\r\n    const winner = getHighest(people, 'height')\r\n    setCurrentCards(people)\r\n    setLastWinner && setLastWinner(winner?.node?.name)\r\n    setGameHistory && setGameHistory([...gameHistory || [], winner?.node?.name])\r\n\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentRound]);\r\n\r\n  if (loading) {\r\n    return <LoadingComponent />;\r\n  }\r\n\r\n  if (error || !data) {\r\n    return <ErrorComponent />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n        {currentCards?.map((peopleEdge: PeopleEdge, index: number) => {\r\n          if (peopleEdge?.node) {\r\n            return (\r\n              <Card key={index} >\r\n                <FilmCharacter player={index + 1} person={peopleEdge.node}></FilmCharacter>\r\n              </Card>)\r\n            }\r\n          })}\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default FilmCharactersGameContainer;","import React, { FunctionComponent } from 'react';\r\nimport { Starship } from '../../generated/graphql';\r\nimport styled from \"styled-components\"\r\n\r\nconst StarshipCard = styled.div`\r\n  color: #fff;\r\n  font-weight: 300;\r\n`\r\n\r\ninterface StarShipProps {\r\n  ship: Starship;\r\n  player: number;\r\n}\r\n\r\nexport const StarShip: FunctionComponent<StarShipProps> = ({ship, player}) => {\r\n    return (\r\n       <StarshipCard>\r\n          <p>Player: Player {player}</p>\r\n          <p>Model: {ship?.model}</p>\r\n          <p>HyperdriveRating: {ship?.hyperdriveRating}</p>\r\n       </StarshipCard>\r\n    )\r\n};\r\n\r\nexport default StarShip;","import gql from \"graphql-tag\";\r\n\r\nconst QUERY_STARWARS_SHARSHIPS = gql`\r\n{\r\n  allStarships {\r\n    edges {\r\n      node {\r\n        name\r\n        model\r\n        hyperdriveRating\r\n      }\r\n    }\r\n  }\r\n}`\r\n\r\nexport default QUERY_STARWARS_SHARSHIPS;","import React, { FunctionComponent, useContext, useState, useEffect, Fragment } from 'react';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport StarShip from './StarShip'\r\nimport QUERY_STARWARS_SHARSHIPS from './query'\r\nimport { StarshipsEdge } from '../../generated/graphql';\r\nimport getRandom from '../../utils/getRandom';\r\nimport getHighest from '../../utils/getHighest';\r\nimport Card from '../Card';\r\nimport GameHistoryContext from '../../context/GameHistoryContext';\r\nimport { ErrorComponent, LoadingComponent } from '../Components';\r\n\r\ninterface StarShipsContainerProps {\r\n  numberOfShips: number;\r\n  currentRound: number;\r\n}\r\n\r\nexport const StarShipsContainer: FunctionComponent<StarShipsContainerProps> =\r\n    ({ numberOfShips, currentRound }) => {\r\n  const { data, error, loading } = useQuery(QUERY_STARWARS_SHARSHIPS);\r\n  const { setLastWinner,  gameHistory, setGameHistory }  = useContext(GameHistoryContext)\r\n  const [ currentCards, setCurrentCards] = useState();   \r\n\r\n  useEffect(() => {\r\n    if (!data?.allStarships?.edges) \r\n      return\r\n\r\n    const ships = getRandom(data?.allStarships?.edges, numberOfShips);\r\n    const winner = getHighest(ships, 'hyperdriveRating')\r\n\r\n    setCurrentCards(ships)\r\n\r\n    setLastWinner && setLastWinner(winner?.node?.name)\r\n    setGameHistory && setGameHistory([...gameHistory || [], winner?.node?.name])\r\n\r\n     // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentRound]);\r\n\r\n  if (loading) {\r\n    return <LoadingComponent />\r\n  }\r\n\r\n  if (error || !data) {\r\n    return <ErrorComponent />;\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n        {currentCards?.map((starshipsEdge: StarshipsEdge, index: number) => {\r\n          if (starshipsEdge?.node) {\r\n            return (\r\n              <Card key={index} >\r\n                <StarShip player={index + 1} ship={starshipsEdge.node}></StarShip>\r\n              </Card>)\r\n            }\r\n          })}\r\n    </Fragment>\r\n  )\r\n};\r\n\r\nexport default StarShipsContainer;\r\n","import React, { FunctionComponent, useContext } from 'react';\r\nimport styled from \"styled-components\"\r\nimport GameType from '../types/gameType';\r\nimport { Link } from 'react-router-dom';\r\nimport GameHistoryContext from '../context/GameHistoryContext';\r\n\r\nconst DashBoardPanel = styled.div`\r\n  padding-left: 20px;\r\n  display: grid\r\n`\r\n\r\nconst Button = styled.button`\r\n  height: 10vh\r\n`\r\n\r\nconst Title = styled.h3`\r\n  color: white;\r\n  text-align: center;\r\n`\r\n\r\ninterface DashboardProps {\r\n    handleGameClick: ((gameType: GameType) => void)\r\n}\r\n\r\nconst Dashboard: FunctionComponent<DashboardProps> = ({handleGameClick}) => {\r\n    const { lastWinner }  = useContext(GameHistoryContext)\r\n\r\n    return (\r\n        <DashBoardPanel>\r\n            <Title>{lastWinner ? `Winner is ${lastWinner}` : `STARCARDS`}</Title> }\r\n            <Button onClick={() => handleGameClick(GameType.Character)}>Actor Round</Button>\r\n            <Button onClick={() => handleGameClick(GameType.Spaceship)}>Spaceship Round</Button>\r\n            <Button><Link to=\"/history\">History</Link></Button>\r\n        </DashBoardPanel>\r\n)}\r\n\r\nexport default Dashboard;","import React, { useState } from 'react';\r\nimport FilmCharactersContainer from '../../components/FilmCharacter/FilmCharactersContainer'\r\nimport StarShipsContainer from '../../components/StarShips/StarShipsContainer'\r\nimport Dashboard from '../../components/Dashboard'\r\nimport styled from \"styled-components\"\r\nimport StarwarsLogo from '../../image/starwars.png'\r\nimport Background from '../../image/background.jpg'\r\nimport GameType from '../../types/gameType'\r\n\r\nconst MainContainer = styled.div`\r\n  background-image: url(${Background});\r\n  background-repeat: repeat;\r\n`\r\n\r\nconst GameContainer = styled.div`\r\n  display: grid;\r\n  margin: 2rem;\r\n  grid-template-columns: 30% 25% 25%;\r\n  grid-column-gap: 5%;\r\n  height: 60vh;\r\n`\r\n\r\nfunction GamePage() {\r\n  const [ currentGameType, setCurrentGameType] = useState(GameType.Character);\r\n  const [ currentRound, setCurrentRound] = useState(0);\r\n\r\n  function handleGameClick(event: GameType) {\r\n    if (currentGameType !== event) {\r\n      setCurrentGameType(currentGameType)\r\n    }\r\n    setCurrentRound(currentRound + 1)\r\n  }\r\n\r\n  return (\r\n    <MainContainer>\r\n      <img src={StarwarsLogo} height=\"250\" width=\"350\" alt=\"Starwars\"/>\r\n      <GameContainer>\r\n        <Dashboard handleGameClick={handleGameClick}/>\r\n        {currentGameType === GameType.Character && <FilmCharactersContainer numberOfPeople={2} currentRound={currentRound}></FilmCharactersContainer>}\r\n        {currentGameType === GameType.Spaceship && <StarShipsContainer numberOfShips={2} currentRound={currentRound}></StarShipsContainer>}\r\n      </GameContainer>\r\n    </MainContainer>\r\n  )\r\n}\r\n\r\nexport default GamePage;\r\n\r\n  // Print alphabetized array to the console\r\n  // todo Print alphabetized array to the console\r\n  // ? reminder\r\n  // ! obsolute\r\n  // @return The ID of the inserted account.","import React, { FunctionComponent, useContext }from 'react';\r\nimport GameHistoryContext from '../../context/GameHistoryContext';\r\nimport { NavLink } from 'react-router-dom';\r\nimport styled from \"styled-components\"\r\nimport Background from '../../image/background.jpg'\r\n\r\nconst MainContainer = styled.div`\r\n  background-image: url(${Background});\r\n  background-repeat: repeat;\r\n  color: white;\r\n  font-size: 1rem;\r\n`\r\nconst Title = styled.div`\r\n  color: #fff;\r\n  font-size: 2rem;\r\n`\r\n\r\ninterface HistoryPageProps {}\r\n\r\nexport const HistoryPage: FunctionComponent<HistoryPageProps> = () => {\r\n  const { gameHistory }  = useContext(GameHistoryContext)\r\n\r\n  return (\r\n    <MainContainer>\r\n        <Title>Game History</Title>\r\n        {gameHistory && gameHistory?.map((history) => {\r\n          return <div>{history}</div>\r\n        })}\r\n        <NavLink to=\"/\">Back</NavLink>\r\n    </MainContainer>\r\n  )\r\n};\r\n\r\nexport default HistoryPage;","import React, { useState } from 'react';\r\nimport { ApolloProvider } from 'react-apollo';\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\r\nimport getClient from './utils/getClients';\r\nimport GamePage from './pages/GamePage/GamePage';\r\nimport HistoryPage from './pages/HistoryPage/HistoryPage';\r\nimport { GameHistoryProvider } from '../src/context/GameHistoryContext';\r\n\r\nfunction App() {\r\n    const [gameHistory, setGameHistory] = useState([]);\r\n    const [lastWinner, setLastWinner ] = useState();\r\n    const client = getClient('https://starwars-api-poc.netlify.app/.netlify/functions/index');\r\n\r\n    return (\r\n        <GameHistoryProvider value={{gameHistory, setGameHistory, lastWinner, setLastWinner}}>\r\n            <BrowserRouter>\r\n                <Switch>\r\n                    <Route exact path=\"/\">\r\n                    <ApolloProvider client={client}>\r\n                        <GamePage />\r\n                    </ApolloProvider>\r\n                    </Route>\r\n                    <Route path=\"/history\">\r\n                    <HistoryPage />\r\n                    </Route>\r\n                </Switch>\r\n            </BrowserRouter>\r\n        </GameHistoryProvider>\r\n    )}\r\n\r\nexport default App","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}